//this only example how devide client/server side logic

#if SERVER

using NSL.Node.RoomServer.Shared.Client.Core.Enums;
using NSL.SocketCore.Utils.Buffer;
using NSL.UDP;
using System;

namespace NSL.Node.RoomServer.Shared.Client.Core
{
    public partial class GameInfo
    {
        private void Initialize()
        {
            RoomInfo.OnRoomReady += RoomInfo_OnRoomReady;
            RoomInfo.OnNodeConnect += RoomInfo_OnNodeConnect;
            // example for server handle
            RoomInfo.RegisterHandle(1, testCommand_handle);
        }

        private void RoomInfo_OnNodeConnect(NodeInfo obj)
        {
            var packet = new DgramOutputPacketBuffer();

            packet.PacketId = (ushort)RoomPacketEnum.Execute;

            packet.WriteUInt16(1);

            RoomInfo.SendTo(obj, packet, false);

            packet.DataPosition = 0;
            packet.WriteUInt16(2);

            RoomInfo.SendTo(obj.Id, packet, false);

            packet.DataPosition = 0;
            packet.WriteUInt16(3);

            RoomInfo.SendTo(Guid.NewGuid(), packet, false);

            packet.Dispose();

            RoomInfo.SendTo(obj, 4, packet => {
                packet.WriteInt32(0);
            });

            RoomInfo.SendTo(obj.Id, 5, packet => {
                packet.WriteInt32(0);
            });
        }

        private void RoomInfo_OnRoomReady()
        {
            RoomInfo.Broadcast(6, packet => {
                packet.WriteInt32(0);
            });

            var packet = new DgramOutputPacketBuffer();

            packet.PacketId = (ushort)RoomPacketEnum.Execute;

            packet.WriteUInt16(7);

            RoomInfo.Broadcast(packet);
        }

        // example for server handle
        private void testCommand_handle(NodeInfo player, InputPacketBuffer buffer)
        {
            Console.WriteLine($"receive testCommand from {player?.Id.ToString() ?? "Server"}");
        }
    }
}
#endif